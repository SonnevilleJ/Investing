using System;
using Microsoft.EntityFrameworkCore;
using Sonneville.Investing.Persistence.EFCore.Security;
using Sonneville.Investing.Persistence.EFCore.Users;

namespace Sonneville.Investing.Persistence.EFCore.EntityFrameworkCore
{
    public interface IDataContext : IDisposable
    {
        IApplicationUserRepository ApplicationUserRepository { get; }
        IPasswordDigestRepository PasswordDigestRepository { get; }
        int SaveChanges();
    }

    public class DataContext : DbContext, IDataContext
    {
        private readonly DatabaseConnectionInfo _databaseConnectionInfo;

        public DataContext(DatabaseConnectionInfo databaseConnectionInfo)
        {
            _databaseConnectionInfo = databaseConnectionInfo;
            ApplicationUserRepository = new ApplicationUserRepository(this);
            PasswordDigestRepository = new PasswordDigestRepository(this);
        }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            optionsBuilder.UseNpgsql(_databaseConnectionInfo.ConnectionString);
            base.OnConfiguring(optionsBuilder);
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            new FluentModelBuilder<ApplicationUser>(modelBuilder)
                .HasAutoGeneratedProperty(user => user.DatabaseId)
                .HasPrimaryKey(user => user.DatabaseId)
                .HasUnique(user => user.UserName);

            new FluentModelBuilder<PasswordDigest>(modelBuilder)
                .HasAutoGeneratedProperty(digest => digest.DatabaseId)
                .HasPrimaryKey(digest => digest.DatabaseId)
                .HasOneToOneRelationship(
                    hashedDigest => hashedDigest.User,
                    user => user.PasswordDigest,
                    hashedDigest => hashedDigest.UserDatabaseId
                );

            modelBuilder.ForNpgsqlUseSerialColumns();
            base.OnModelCreating(modelBuilder);
        }

        public IApplicationUserRepository ApplicationUserRepository { get; }

        public IPasswordDigestRepository PasswordDigestRepository { get; }
    }
}
