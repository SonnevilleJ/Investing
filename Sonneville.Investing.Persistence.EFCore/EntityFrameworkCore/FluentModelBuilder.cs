using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;

namespace Sonneville.Investing.Persistence.EFCore.EntityFrameworkCore
{
    public class FluentModelBuilder<TEntity> where TEntity : class
    {
        private readonly ModelBuilder _modelBuilder;

        public FluentModelBuilder(ModelBuilder modelBuilder)
        {
            _modelBuilder = modelBuilder;
        }

        public FluentModelBuilder<TEntity> HasIndex(
            Expression<Func<TEntity, object>> indexExpression,
            bool unique = false)
        {
            Entity
                .HasIndex(indexExpression)
                .IsUnique(unique);
            return this;
        }

        public FluentModelBuilder<TEntity> HasUnique(
            Expression<Func<TEntity, object>> indexExpression
        )
        {
            return HasIndex(indexExpression, true);
        }

        public FluentModelBuilder<TEntity> HasAutoGeneratedProperty(
            Expression<Func<TEntity, long>> propertyExpression
        )
        {
            Entity
                .Property(propertyExpression)
                .ValueGeneratedOnAdd();
            return this;
        }

        public FluentModelBuilder<TEntity> HasAutoGeneratedProperty(
            Expression<Func<TEntity, int>> propertyExpression
        )
        {
            Entity
                .Property(propertyExpression)
                .ValueGeneratedOnAdd();
            return this;
        }

        public FluentModelBuilder<TEntity> HasPrimaryKey(Expression<Func<TEntity, object>> keyExpression)
        {
            Entity.HasKey(keyExpression);
            return this;
        }

        public FluentModelBuilder<TEntity> HasOneToOneRelationship<TRelatedEntity>(
            Expression<Func<TEntity, TRelatedEntity>> keyExpression,
            Expression<Func<TRelatedEntity, TEntity>> valueExpression,
            Expression<Func<TEntity, object>> foreignKeyExpression
        ) where TRelatedEntity : class
        {
            Entity
                .HasOne(keyExpression)
                .WithOne(valueExpression)
                .HasForeignKey(foreignKeyExpression);
            return this;
        }

        public FluentModelBuilder<TEntity> HasOneToManyRelationship<TRelatedEntity>(
            Expression<Func<TEntity, TRelatedEntity>> keyExpression,
            Expression<Func<TRelatedEntity, IEnumerable<TEntity>>> valuesExpression,
            Expression<Func<TEntity, object>> foreignKeyExpression
        ) where TRelatedEntity : class
        {
            Entity
                .HasOne(keyExpression)
                .WithMany(valuesExpression)
                .HasForeignKey(foreignKeyExpression);
            return this;
        }

        private EntityTypeBuilder<TEntity> Entity => _modelBuilder.Entity<TEntity>();
    }
}
